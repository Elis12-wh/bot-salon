from aiogram import Router, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from config.bot_config import ADMIN_IDS, FAQ_STORAGE_PATH, GOOGLE_CREDENTIALS_PATH, SPREADSHEET_ID
from keyboards import AdminKeyboard, MainKeyboard, FAQModerateKeyboard, UserFaqKeyboard
from aiogram.types import Message, CallbackQuery
from storage import db
import aiosqlite
from datetime import datetime, timedelta
from aiogram.fsm.state import State, StatesGroup
import asyncio
from utils import FaqDataHandler
from filters import VipUser
from services import GoogleSheetsManager
from states import FaqStates, UserStates
from keyboards import MainKeyboardText
from handlers.general_hanlders import start_handler


user_router = Router(name="user_router")
google_sheets = GoogleSheetsManager(
    creds_path=GOOGLE_CREDENTIALS_PATH,
    spreadsheet_id=SPREADSHEET_ID
)


@user_router.message(lambda message: message.text == MainKeyboardText.texts.get("faq") or message.text == "/faq")
async def handle_faq_menu(message: Message, state: FSMContext):
    questions = FaqDataHandler.get_questions(FAQ_STORAGE_PATH)
    keyboard = await UserFaqKeyboard.get_keyboard(questions)
    answer = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:"
    await message.answer(answer, reply_markup=keyboard)
    await state.set_state(FaqStates.waiting_for_question)

@user_router.message(FaqStates.waiting_for_question)
async def handle_faq_answer(message: Message, state: FSMContext, is_admin: bool = False):
    question = message.text
    answer = FaqDataHandler.get_answer(FAQ_STORAGE_PATH, question)
    if not answer:
        await state.clear()
        await start_handler(message, state, is_admin)
        return
    await message.answer(answer, reply_markup=types.ReplyKeyboardRemove())
    await state.clear()


@user_router.message(lambda message: message.text == "üíÖ –û —Å–∞–ª–æ–Ω–µ –∫—Ä–∞—Å–æ—Ç—ã")
async def handle_about_salon(message: Message, state: FSMContext):
    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–ª–∞–¥–∫–∏–µ –ö—É—Ç–∏–∫—É–ª—ã - –º–µ—Å—Ç–æ, –≥–¥–µ —Ä–æ–∂–¥–∞–µ—Ç—Å—è –∫—Ä–∞—Å–æ—Ç–∞ –∏ —É—é—Ç!\n\n ‚ú® –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å?  \n‚úî –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞ —Å –±–æ–ª—å—à–∏–º –æ–ø—ã—Ç–æ–º  \n‚úî –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞  \n‚úî –£—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –∏ —Å—Ç–µ—Ä–∏–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è  \n‚úî –®–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä —É—Å–ª—É–≥: –º–∞–Ω–∏–∫—é—Ä, –ø–µ–¥–∏–∫—é—Ä, –ø–æ–∫—Ä—ã—Ç–∏–µ, –¥–∏–∑–∞–π–Ω –∏ –Ω–µ —Ç–æ–ª—å–∫–æ  \n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º, —á—Ç–æ–±—ã –≤–∞—à–∏ –Ω–æ–≥—Ç–∏ –≤—ã–≥–ª—è–¥–µ–ª–∏ –±–µ–∑—É–ø—Ä–µ—á–Ω–æ! üíñ"
    await message.answer(text)
    await state.clear()


@user_router.message(lambda message: message.text == "üìç –ê–¥—Ä–µ—Å –∏ –ø—Ä–æ–µ–∑–¥")
async def handle_directions(message: Message, state: FSMContext):
    text = "–ù–∞—à –∞–¥—Ä–µ—Å: \n–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, –¥. 10, 3 —ç—Ç–∞–∂, –¢–¶ \"–°—Ç–∏–ª—å\".\n\n"
    text += "üöó –ù–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ: \n‚Ä¢ –£–¥–æ–±–Ω—ã–π –≤—ä–µ–∑–¥ —Å —É–ª. –¢–≤–µ—Ä—Å–∫–æ–π \n‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞ –≤ –¢–¶ (–ø–µ—Ä–≤—ã–µ 2 —á–∞—Å–∞) \n‚Ä¢ –ò—â–∏—Ç–µ –≤—ã–≤–µ—Å–∫—É —Å–∞–ª–æ–Ω–∞ ¬´Nail Art¬ª —É –≥–ª–∞–≤–Ω–æ–≥–æ –≤—Ö–æ–¥–∞\n\n"
    text += "üöá –ù–∞ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ: \n‚Ä¢ –°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ ¬´–¢–≤–µ—Ä—Å–∫–∞—è¬ª (5 –º–∏–Ω—É—Ç –ø–µ—à–∫–æ–º) \n‚Ä¢ –ê–≤—Ç–æ–±—É—Å—ã: ‚Ññ‚Ññ 101, 904 (–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ ¬´–¢–≤–µ—Ä—Å–∫–∞—è –ø–ª–æ—â–∞–¥—å¬ª) \n‚Ä¢ –û—Ç –º–µ—Ç—Ä–æ —Å–ª–µ–¥—É–π—Ç–µ –ø—Ä—è–º–æ –¥–æ –¢–¶ ¬´–°—Ç–∏–ª—å¬ª, –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ —Å—Ç–µ–∫–ª—è–Ω–Ω—ã–µ –¥–≤–µ—Ä–∏"
    await message.answer(text)
    await state.clear()


@user_router.message(lambda message: message.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" or message.text == "/contacts")
async def handle_contact_info(message: Message, state: FSMContext):
    text = "üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:  \nüí¨ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (925) 478-32-15  \nüì© Email: beauty.nails@mail.ru  \nüì± Instagram: @glamour_nails_spb  \nüåê –°–∞–π—Ç: glamour-nails.ru"
    await message.answer(text)
    await state.clear()


@user_router.message(lambda message: message.text == "üîç –û–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å—å" or message.text == "/appointment")
async def handle_appointment_start(message: Message, state: FSMContext):
    workers = await google_sheets.get_worker_names()
    keyboard = await UserFaqKeyboard.get_keyboard(workers)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏:", reply_markup=keyboard)
    await state.set_state(UserStates.picking_worker)


@user_router.message(lambda message: message.text == "üîç –û–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å—å" or message.text == "/appointment", VipUser(db))
async def handle_vip_appointment_start(message: Message, state: FSMContext):
    workers = await google_sheets.get_worker_names()
    keyboard = await UserFaqKeyboard.get_keyboard(workers)
    await message.answer("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –¥–æ–≤–µ—Ä–∏–µ! –í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–∞—Å—Ç–µ—Ä–∞:", reply_markup=keyboard)
    await state.set_state(UserStates.picking_worker)


@user_router.message(UserStates.picking_worker)
async def handle_worker_selection(message: Message, state: FSMContext):
    worker_windows = await google_sheets.get_worker_windows(message.text)
    await state.update_data(worker_windows=worker_windows)
    dates = worker_windows.get_dates()
    keyboard = await UserFaqKeyboard.get_keyboard(dates)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É:", reply_markup=keyboard)
    await state.set_state(UserStates.picking_date)


@user_router.message(UserStates.picking_date)
async def handle_date_selection(message: Message, state: FSMContext):
    date = message.text
    worker_windows = await state.get_data()
    await state.update_data(date=date)
    windows = worker_windows.get("worker_windows").get_windows(date)
    keyboard = await UserFaqKeyboard.get_keyboard(windows)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=keyboard)
    await state.set_state(UserStates.picking_time)


@user_router.message(UserStates.picking_time)
async def handle_time_selection(message: Message, state: FSMContext):
    time = message.text
    date = (await state.get_data())["date"]
    worker_windows = (await state.get_data())["worker_windows"]
    worker_name = worker_windows.worker_name
    await google_sheets.reserve_window(message.from_user.first_name, worker_name, date, time)
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –Ω–∞ {date} –≤ {time}. –í–∞—Å –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –º–∞—Å—Ç–µ—Ä {worker_name}", reply_markup=types.ReplyKeyboardRemove())
    for admin in ADMIN_IDS:
        await message.bot.send_message(admin, f"–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:\n–ö–ª–∏–µ–Ω—Ç: {message.from_user.first_name}\n–î–∞—Ç–∞: {date}\n–í—Ä–µ–º—è: {time}\n–ú–∞—Å—Ç–µ—Ä: {worker_name}\n\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\nID: {message.from_user.id}\nUsername: {message.from_user.username}")
    await state.clear()

